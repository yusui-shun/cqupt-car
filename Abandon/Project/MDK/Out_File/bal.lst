C251 COMPILER V5.60.0,  bal                                                                17/07/23  20:21:50  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE bal
OBJECT MODULE PLACED IN .\Out_File\bal.obj
COMPILER INVOKED BY: E:\keil5\C251\BIN\C251.EXE ..\CODE\bal.c XSMALL INTR2 WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BROWSE INCD
                    -IR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;
                    -..\USER\src) DEBUG PRINT(.\Out_File\bal.lst) TABS(2) OBJECT(.\Out_File\bal.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          #include "bal.h"
    3          #include "motor.h"
    4          #include "LQ_PID.h"
    5          #include "encoder.h"
    6          #include "electronic.h"
    7          #include "element.h"
    8          
    9          
   10           
   11          
   12          int16  Pulse_L=0, Pulse_R=0;
   13          
   14          extern int8 Turn_flag;
   15          extern float electro_error;
   16          extern int16 time_ring;
   17          float Speed_L_Out=0, Speed_R_Out=0;
   18          
   19          uint16 Speed_Target_car = 0;
   20          int16 AddSpeed=0;
   21          // int16 Pulse_L_last=0,Pulse_R_last=0;
   22          
   23          
   24          
   25          int16 global_L_Speed_Now_car=0,global_R_Speed_Now_car=0;
   26          
   27          //速度环参数
   28          int16 Basic_L_Speed=0,Basic_R_Speed=0;
   29          int16 L_Speed_Now_car=0,R_Speed_Now_car=0;
   30          int16 L_Speed_Now_Error=0,R_Speed_Now_Error=0;
   31          int16 L_Speed_Last_Error=0, R_Speed_Last_Error=0;
   32          
   33          float global_pid_kp_out=0, global_pid_ki_out=0;
   34          
   35          pid_param_t Turn_PID,
   36          L_Speed_PID,R_Speed_PID;
   37          
   38          
   39          float Turn_OUT=0;
   40          
   41          float Turn_OUT_Error=0;
   42          float L_target=0,R_target=0;
   43          
   44          float Turn_K1 = 0, Turn_K2 = 0;   // 4, 2
   45          
   46          uint16 Brake_CNT = 0;
   47          uint16 Brake_Flag = 0;
   48          
   49          void All_PID_Init(void)
   50          {     
   51   1        PidInit(&L_Speed_PID);   
   52   1        PidInit(&R_Speed_PID);    
   53   1        PidInit(&Turn_PID);
   54   1        
   55   1        /*
   56   1        1 在速度为4的时候，200 1 150 1 比较慢
   57   1        2 在速度为8的时候，
C251 COMPILER V5.60.0,  bal                                                                17/07/23  20:21:50  PAGE 2   

   58   1        3 在速度为12的时候，校赛速度差不多  
   59   1        4 
   60   1        
   61   1        */  
   62   1        //速度赋值
   63   1      
   64   1      
   65   1        L_Speed_PID.kp = L_Speed_kp;        //对应右轮参数`   //500
   66   1        L_Speed_PID.ki = L_Speed_ki;                        //0.02
   67   1        L_Speed_PID.kd = 0;
   68   1        
   69   1        R_Speed_PID.kp = R_Speed_kp;        //对应左轮参数    //300
   70   1        R_Speed_PID.ki = R_Speed_ki;                      //0.05
   71   1        R_Speed_PID.kd = 0; 
   72   1        
   73   1        Turn_PID.kp = Turn_kp;      //1  0.02
   74   1        Turn_PID.ki = 0;
   75   1        Turn_PID.kd = 0;
   76   1        
   77   1        Speed_Target_car = Speed_Target;
   78   1      }
   79          
   80          /*************总控制***********/
   81          void Bal_control(void)
   82          {
   83   1          if(Turn_flag)     //电磁信号处理完成一次的标志位，5ms处理完成一次 执行一次转向
             -pid计算
   84   1          {       
   85   2              Turn_OUT = PidIncCtrl(&Turn_PID, electro_error); //转向控制
   86   2              Turn_flag = 0;
   87   2          }
   88   1          
   89   1      //    Speed_Target_car = Speed_Target;
   90   1          
   91   1          if(electro_error<-85 || electro_error>85)
   92   1          {
   93   2          //  P36 = 1;
   94   2            Brake_Flag = 1;
   95   2          }
   96   1          else
   97   1          {
   98   2            Brake_CNT++;
   99   2            
  100   2            if(Brake_CNT >= 10)
  101   2            {
  102   3              Brake_Flag = 0;
  103   3          //    P36 = 1;
  104   3              Brake_CNT = 0;
  105   3            }
  106   2          }
  107   1          
  108   1          
  109   1          if(Brake_Flag == 1 || time_ring > 0 )
  110   1          {
  111   2            Speed_Target_car = Speed_Target - 1;
  112   2          }
  113   1          else
  114   1          {
  115   2            Speed_Target_car = Speed_Target;
  116   2          }
  117   1          
  118   1            
  119   1      //    if(electro_error<-90)
  120   1      //    {
  121   1      ////        Speed_L_Out+=Turn_K1*electro_error;
  122   1      //      P36 = 0;
C251 COMPILER V5.60.0,  bal                                                                17/07/23  20:21:50  PAGE 3   

  123   1      //    }
  124   1      //    else if(electro_error>90){
  125   1      ////          Speed_R_Out-=Turn_K2*electro_error;
  126   1      //      P36 = 0;
  127   1      //    }
  128   1      //    else
  129   1      //    {
  130   1      //      P36 = 1;
  131   1      //    }
  132   1          
  133   1          velocity_control();   //1ms编码器执行一次 完成一次速度环计算
  134   1          
  135   1      //    if(electro_error<-98||electro_error>98)
  136   1      //    {
  137   1      //       Speed_L_Out-=Turn_K1*electro_error;
  138   1      //       Speed_R_Out-=Turn_K2*electro_error;
  139   1      //    }
  140   1      
  141   1      }
  142          
  143          /****************速度环***********/
  144          void velocity_control(void)
  145          {
  146   1          Pulse_L = encoder_get(EncoderL);    //编码器原始数据
  147   1          Pulse_R = encoder_get(EncoderR);
  148   1          
  149   1          if(P53==0)
  150   1          {
  151   2            Pulse_L = -Pulse_L;
  152   2          }
  153   1          
  154   1          if(P35==1)
  155   1          {
  156   2            Pulse_R = -Pulse_R;
  157   2          }
  158   1          
  159   1          L_Speed_Now_car=Pulse_L;
  160   1          R_Speed_Now_car=Pulse_R;
  161   1          
  162   1          global_L_Speed_Now_car = L_Speed_Now_car;
  163   1          global_R_Speed_Now_car = R_Speed_Now_car;
  164   1          
  165   1          if (Turn_OUT >=0)
  166   1          {
  167   2            L_target = Speed_Target_car;
  168   2            R_target = 2*Speed_Target_car - 2*Turn_OUT;
  169   2          }
  170   1          else
  171   1          {
  172   2            L_target = Speed_Target_car + Turn_OUT;
  173   2            R_target = 2*Speed_Target_car;
  174   2          }
  175   1          
  176   1          L_Speed_Now_Error = L_target - L_Speed_Now_car;   
  177   1          R_Speed_Now_Error = R_target - R_Speed_Now_car;
  178   1          
  179   1          
  180   1          if(L_Speed_Now_Error < 0)
  181   1          {
  182   2            L_Speed_PID.kp = 1.15 * L_Speed_kp;
  183   2            L_Speed_PID.ki = L_Speed_ki;
  184   2          }
  185   1          else
  186   1          {
  187   2            L_Speed_PID.kp = L_Speed_kp;
  188   2            L_Speed_PID.ki = L_Speed_ki;
C251 COMPILER V5.60.0,  bal                                                                17/07/23  20:21:50  PAGE 4   

  189   2          }
  190   1          
  191   1          if(R_Speed_Now_Error < 0)
  192   1          {
  193   2            R_Speed_PID.kp = 1.15 * R_Speed_kp;
  194   2            R_Speed_PID.ki = R_Speed_ki;
  195   2          }
  196   1          else
  197   1          {
  198   2            R_Speed_PID.kp = R_Speed_kp;
  199   2            R_Speed_PID.ki = R_Speed_ki;
  200   2          }
  201   1          
  202   1          
  203   1      //  Speed_L_Out += L_Speed_PID.kp *(L_Speed_Now_Error - L_Speed_Last_Error) + L_Speed_PID.ki * L_Speed_Now
             -_Error;
  204   1      //  Speed_R_Out += R_Speed_PID.kp *(R_Speed_Now_Error - R_Speed_Last_Error) + R_Speed_PID.ki * R_Speed_Now
             -_Error;
  205   1          
  206   1          
  207   1          Speed_L_Out = PidIncCtrl(&L_Speed_PID, L_Speed_Now_Error);      //传递给速度环的误差为    期望
             -速度-实际速度+/-转向环输出值
  208   1          Speed_R_Out = PidIncCtrl(&R_Speed_PID, R_Speed_Now_Error);      //左右轮分开pid    右轮加  左轮减
  209   1          
  210   1          
  211   1          if(Speed_L_Out <-MAXDUTY)
  212   1          {
  213   2            Speed_L_Out = -MAXDUTY;
  214   2            L_Speed_PID.out = -MAXDUTY;
  215   2          }
  216   1          else if(Speed_L_Out >MAXDUTY)
  217   1          {
  218   2            Speed_L_Out = MAXDUTY;
  219   2            L_Speed_PID.out = MAXDUTY;
  220   2          }
  221   1          
  222   1          
  223   1          if(Speed_R_Out < -MAXDUTY)
  224   1          {
  225   2            Speed_R_Out = -MAXDUTY;
  226   2            R_Speed_PID.out = -MAXDUTY;
  227   2          }
  228   1          else if(Speed_R_Out > MAXDUTY)
  229   1          {
  230   2            Speed_R_Out = MAXDUTY;
  231   2            R_Speed_PID.out = MAXDUTY;
  232   2          }
  233   1          
  234   1      //  L_Speed_Last_Error = L_Speed_Now_Error;   
  235   1      //  R_Speed_Last_Error = R_Speed_Now_Error;
  236   1          
  237   1          ctimer_count_clean(EncoderL);                                        // 清空编码器计数
  238   1          ctimer_count_clean(EncoderR);                                        // 清空编码器计数
  239   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       836     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       216     ------
  bit size             =    ------     ------
C251 COMPILER V5.60.0,  bal                                                                17/07/23  20:21:50  PAGE 5   

  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       176     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
